name: CI Workflow

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pylint pyflakes radon autopep8

    # Ensure the post_traces folder is created first
    - name: Create post_traces folder
      run: mkdir -p post_traces

    # Step to run pylint for linting and save the output to a text file
    - name: Run pylint for linting
      run: |
        PYTHONPATH=./src pylint src/hw2_debugging.py | tee post_traces/pylint_post_trace.txt
        if [ ! -s post_traces/pylint_post_trace.txt ]; then echo "No trace output generated" > post_traces/pylint_post_trace.txt; fi

    # Step to run Pyflakes and save the output to a text file
    - name: Run Pyflakes and save output
      run: |
        pyflakes src/*.py | tee post_traces/pyflakes_post_trace.txt
    
    # Step to run Radon for metrics and format the output
    - name: Run Radon and format the output
      run: |
        echo "Running Radon metrics for the src directory..." > post_traces/radon_post_trace.txt

        # Cyclomatic Complexity
        echo -e "\nCyclomatic Complexity:" >> post_traces/radon_post_trace.txt
        radon cc src -a >> post_traces/radon_post_trace.txt

        # Maintainability Index
        echo -e "\nMaintainability Index:" >> post_traces/radon_post_trace.txt
        radon mi src >> post_traces/radon_post_trace.txt

        # Raw Metrics
        echo -e "\nRaw Metrics:" >> post_traces/radon_post_trace.txt
        radon raw src >> post_traces/radon_post_trace.txt

        # Check if the Radon file has content, otherwise write "No trace output generated"
        if [ ! -s post_traces/radon_post_trace.txt ]; then echo "No trace output generated" > post_traces/radon_post_trace.txt; fi

    # Step to run autopep8 to format code and save output
    - name: Run autopep8 to format code and save output
      run: |
        autopep8 --recursive --in-place --aggressive --aggressive . | tee post_traces/autopep8_post_trace.txt
        if [ ! -s post_traces/autopep8_post_trace.txt ]; then echo "No trace output generated" > post_traces/autopep8_post_trace.txt; fi

    # Commit and push the post_traces folder if there are changes
    - name: Commit and push post_traces folder
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "GitHub Actions"
        git add post_traces
        git diff --cached --exit-code || git commit -m "Add post_traces logs"
        git push origin HEAD

    # Step to commit changes after autopep8 if there are any changes
    - name: Commit changes if autopep8 made changes
      run: |
        git diff --exit-code || (git checkout -b autopep8-patches && git commit -am "autopep8 action fixes" && git push origin autopep8-patches)
      continue-on-error: true

    # Step to create a pull request if there are changes and a new branch was pushed
    - name: Create Pull Request
      if: success() && steps.Commit_changes_if_autopep8_made_changes.outcome == 'success'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "Fixes by autopep8 action",
            head: "autopep8-patches",
            base: "main",
            body: "This is an auto-generated PR with fixes by autopep8.",
            labels: ["autopep8", "automated pr"]
          })
